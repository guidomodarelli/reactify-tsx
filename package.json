{
  "name": "reactify-tsx",
  "displayName": "reactify-tsx",
  "description": "Reactify TSX is a VS Code extension that delivers WebStorm-inspired refactors for React and TypeScript, providing advanced visual tools and code assistance to make development faster and more convenient.",
  "icon": "assets/icon.png",
  "version": "0.13.0",
  "engines": {
    "vscode": "^1.104.0"
  },
  "publisher": "guidomodarelli",
  "repository": {
    "type": "git",
    "url": "https://github.com/guidomodarelli/reactify-tsx"
  },
  "categories": [
    "Other"
  ],
  "activationEvents": [
    "onCommand:reactify-tsx.enumToConst",
    "onCommand:reactify-tsx.convertToLet",
    "onCommand:reactify-tsx.convertToConst",
    "onCommand:reactify-tsx.extractArrowFunction",
    "onCommand:reactify-tsx.flipIfElse",
    "onCommand:reactify-tsx.removeRedundantElse",
    "onCommand:reactify-tsx.moveBlockDown",
    "onCommand:reactify-tsx.moveBlockUp",
    "onCommand:reactify-tsx.parallelizeAwaitSelection",
    "onCommand:reactify-tsx.transformFunction",
    "onCommand:reactify-tsx.toggleJsxAttributeValue",
    "onCommand:reactify-tsx.toggleStringTemplate",
    "onCommand:reactify-tsx.toggleArrowBody",
    "onCommand:reactify-tsx.addParensToSingleArrowParam",
    "onLanguage:javascript",
    "onLanguage:javascriptreact",
    "onLanguage:typescript",
    "onLanguage:typescriptreact",
    "onCommand:reactify-tsx.splitIntoMultipleDeclarations",
    "onCommand:reactify-tsx.splitDeclarationAndInitialization",
    "onCommand:reactify-tsx.mergeDeclarationAndInitialization",
    "onCommand:reactify-tsx.splitOrMergeString",
    "onCommand:reactify-tsx.wrapWithUseCallback",
    "onCommand:reactify-tsx.replaceIfElseWithTernary",
    "onCommand:reactify-tsx.simplifyIfElse",
    "onCommand:reactify-tsx.simplifyTernary",
    "onCommand:reactify-tsx.mergeNestedIf"
  ],
  "main": "./dist/extension.js",
  "contributes": {
    "commands": [
      {
        "command": "reactify-tsx.extractArrowFunction",
        "title": "Reactify TSX: Extract Arrow Function to Handler"
      },
      {
        "command": "reactify-tsx.transformFunction",
        "title": "Reactify TSX: Transform Function"
      },
      {
        "command": "reactify-tsx.flipIfElse",
        "title": "Reactify TSX: Flip If/Else Branches"
      },
      {
        "command": "reactify-tsx.removeRedundantElse",
        "title": "Reactify TSX: Remove Redundant Else"
      },
      {
        "command": "reactify-tsx.convertToLet",
        "title": "Reactify TSX: Convert Declaration to let"
      },
      {
        "command": "reactify-tsx.convertToConst",
        "title": "Reactify TSX: Convert Declaration to const"
      },
      {
        "command": "reactify-tsx.moveBlockUp",
        "title": "Reactify TSX: Move Block Up"
      },
      {
        "command": "reactify-tsx.moveBlockDown",
        "title": "Reactify TSX: Move Block Down"
      },
      {
        "command": "reactify-tsx.enumToConst",
        "title": "Reactify TSX: Convert Enum to Const"
      },
      {
        "command": "reactify-tsx.parallelizeAwaitSelection",
        "title": "Reactify TSX: Parallelize Await Selection"
      },
      {
        "command": "reactify-tsx.toggleJsxAttributeValue",
        "title": "Reactify TSX: Toggle JSX Attribute Braces"
      },
      {
        "command": "reactify-tsx.toggleStringTemplate",
        "title": "Reactify TSX: Toggle String â‡„ Template Literal"
      },
      {
        "command": "reactify-tsx.splitIntoMultipleDeclarations",
        "title": "Reactify TSX: Split Into Multiple Declarations"
      },
      {
        "command": "reactify-tsx.splitDeclarationAndInitialization",
        "title": "Reactify TSX: Split Declaration and Initialization"
      },
      {
        "command": "reactify-tsx.mergeDeclarationAndInitialization",
        "title": "Reactify TSX: Merge Declaration and Initialization"
      },
      {
        "command": "reactify-tsx.toggleArrowBody",
        "title": "Reactify TSX: Toggle Arrow Body (Expression -> Block)"
      },
      {
        "command": "reactify-tsx.addParensToSingleArrowParam",
        "title": "Reactify TSX: Add Parens to Single Arrow Parameter"
      },
      {
        "command": "reactify-tsx.splitOrMergeString",
        "title": "Reactify TSX: Split String at Caret / Merge String Literals"
      },
      {
        "command": "reactify-tsx.wrapWithUseCallback",
        "title": "Reactify TSX: Wrap Function with useCallback"
      },
      {
        "command": "reactify-tsx.replaceIfElseWithTernary",
        "title": "Reactify TSX: Replace If/Else with Ternary"
      },
      {
        "command": "reactify-tsx.simplifyIfElse",
        "title": "Reactify TSX: Simplify If/Else"
      },
      {
        "command": "reactify-tsx.simplifyTernary",
        "title": "Reactify TSX: Simplify Ternary Expression"
      }
      ,
      {
        "command": "reactify-tsx.mergeNestedIf",
        "title": "Reactify TSX: Merge Nested If Statements"
      }
    ],
    "menus": {
      "editor/context": [
        {
          "command": "reactify-tsx.extractArrowFunction",
          "when": "editorLangId == typescriptreact || editorLangId == javascriptreact || editorLangId == typescript || editorLangId == javascript",
          "group": "navigation@90"
        },
        {
          "command": "reactify-tsx.transformFunction",
          "when": "editorLangId == typescriptreact || editorLangId == javascriptreact || editorLangId == typescript || editorLangId == javascript",
          "group": "navigation@91"
        },
        {
          "command": "reactify-tsx.flipIfElse",
          "when": "editorLangId == typescriptreact || editorLangId == javascriptreact || editorLangId == typescript || editorLangId == javascript",
          "group": "navigation@92"
        },
        {
          "command": "reactify-tsx.removeRedundantElse",
          "when": "editorLangId == typescriptreact || editorLangId == javascriptreact || editorLangId == typescript || editorLangId == javascript",
          "group": "navigation@92.05"
        },
        {
          "command": "reactify-tsx.parallelizeAwaitSelection",
          "when": "editorLangId == typescriptreact || editorLangId == javascriptreact || editorLangId == typescript || editorLangId == javascript",
          "group": "navigation@92.06"
        },
        {
          "command": "reactify-tsx.convertToLet",
          "when": "editorLangId == typescriptreact || editorLangId == javascriptreact || editorLangId == typescript || editorLangId == javascript",
          "group": "navigation@92.1"
        },
        {
          "command": "reactify-tsx.convertToConst",
          "when": "editorLangId == typescriptreact || editorLangId == javascriptreact || editorLangId == typescript || editorLangId == javascript",
          "group": "navigation@92.2"
        },
        {
          "command": "reactify-tsx.enumToConst",
          "when": "editorLangId == typescriptreact || editorLangId == javascriptreact || editorLangId == typescript || editorLangId == javascript",
          "group": "navigation@93"
        },
        {
          "command": "reactify-tsx.toggleJsxAttributeValue",
          "when": "editorLangId == typescriptreact || editorLangId == javascriptreact || editorLangId == typescript || editorLangId == javascript",
          "group": "navigation@94"
        },
        {
          "command": "reactify-tsx.splitIntoMultipleDeclarations",
          "when": "editorLangId == typescriptreact || editorLangId == javascriptreact || editorLangId == typescript || editorLangId == javascript",
          "group": "navigation@94.1"
        },
        {
          "command": "reactify-tsx.splitDeclarationAndInitialization",
          "when": "editorLangId == typescriptreact || editorLangId == javascriptreact || editorLangId == typescript || editorLangId == javascript",
          "group": "navigation@94.2"
        },
        {
          "command": "reactify-tsx.mergeDeclarationAndInitialization",
          "when": "editorLangId == typescriptreact || editorLangId == javascriptreact || editorLangId == typescript || editorLangId == javascript",
          "group": "navigation@94.3"
        },
        {
          "command": "reactify-tsx.addParensToSingleArrowParam",
          "when": "editorLangId == typescriptreact || editorLangId == javascriptreact || editorLangId == typescript || editorLangId == javascript",
          "group": "navigation@94.4"
        },
        {
          "command": "reactify-tsx.wrapWithUseCallback",
          "when": "editorLangId == typescriptreact || editorLangId == javascriptreact || editorLangId == typescript || editorLangId == javascript",
          "group": "navigation@92.08"
        },
        {
          "command": "reactify-tsx.replaceIfElseWithTernary",
          "when": "editorLangId == typescriptreact || editorLangId == javascriptreact || editorLangId == typescript || editorLangId == javascript",
          "group": "navigation@92.07"
        },
        {
          "command": "reactify-tsx.simplifyIfElse",
          "when": "editorLangId == typescriptreact || editorLangId == javascriptreact || editorLangId == typescript || editorLangId == javascript",
          "group": "navigation@92.065"
        }
        ,
        {
          "command": "reactify-tsx.mergeNestedIf",
          "when": "editorLangId == typescriptreact || editorLangId == javascriptreact || editorLangId == typescript || editorLangId == javascript",
          "group": "navigation@92.067"
        }
      ],
      "editor/codeAction": [
        {
          "command": "reactify-tsx.extractArrowFunction",
          "when": "editorTextFocus && editorHasSelection && (editorLangId == typescriptreact || editorLangId == javascriptreact || editorLangId == typescript || editorLangId == javascript)",
          "group": "refactor@10"
        },
        {
          "command": "reactify-tsx.transformFunction",
          "when": "editorTextFocus && editorHasSelection && (editorLangId == typescriptreact || editorLangId == javascriptreact || editorLangId == typescript || editorLangId == javascript)",
          "group": "refactor@11"
        },
        {
          "command": "reactify-tsx.flipIfElse",
          "when": "editorTextFocus && editorHasSelection && (editorLangId == typescriptreact || editorLangId == javascriptreact || editorLangId == typescript || editorLangId == javascript)",
          "group": "refactor@12"
        },
        {
          "command": "reactify-tsx.removeRedundantElse",
          "when": "editorTextFocus && editorHasSelection && (editorLangId == typescriptreact || editorLangId == javascriptreact || editorLangId == typescript || editorLangId == javascript)",
          "group": "refactor@12.05"
        },
        {
          "command": "reactify-tsx.parallelizeAwaitSelection",
          "when": "editorTextFocus && editorHasSelection && (editorLangId == typescriptreact || editorLangId == javascriptreact || editorLangId == typescript || editorLangId == javascript)",
          "group": "refactor@12.06"
        },
        {
          "command": "reactify-tsx.convertToLet",
          "when": "editorTextFocus && editorHasSelection && (editorLangId == typescriptreact || editorLangId == javascriptreact || editorLangId == typescript || editorLangId == javascript)",
          "group": "refactor@12.1"
        },
        {
          "command": "reactify-tsx.convertToConst",
          "when": "editorTextFocus && editorHasSelection && (editorLangId == typescriptreact || editorLangId == javascriptreact || editorLangId == typescript || editorLangId == javascript)",
          "group": "refactor@12.2"
        },
        {
          "command": "reactify-tsx.enumToConst",
          "when": "editorTextFocus && editorHasSelection && (editorLangId == typescriptreact || editorLangId == javascriptreact || editorLangId == typescript || editorLangId == javascript)",
          "group": "refactor@13"
        },
        {
          "command": "reactify-tsx.toggleJsxAttributeValue",
          "when": "editorTextFocus && editorHasSelection && (editorLangId == typescriptreact || editorLangId == javascriptreact || editorLangId == typescript || editorLangId == javascript)",
          "group": "refactor@14"
        },
        {
          "command": "reactify-tsx.moveBlockUp",
          "when": "editorTextFocus && (editorLangId == typescriptreact || editorLangId == javascriptreact || editorLangId == typescript || editorLangId == javascript)",
          "group": "refactor@15"
        },
        {
          "command": "reactify-tsx.moveBlockDown",
          "when": "editorTextFocus && (editorLangId == typescriptreact || editorLangId == javascriptreact || editorLangId == typescript || editorLangId == javascript)",
          "group": "refactor@16"
        },
        {
          "command": "reactify-tsx.splitIntoMultipleDeclarations",
          "when": "editorTextFocus && (editorLangId == typescriptreact || editorLangId == javascriptreact || editorLangId == typescript || editorLangId == javascript)",
          "group": "refactor@16.1"
        },
        {
          "command": "reactify-tsx.splitDeclarationAndInitialization",
          "when": "editorTextFocus && (editorLangId == typescriptreact || editorLangId == javascriptreact || editorLangId == typescript || editorLangId == javascript)",
          "group": "refactor@16.2"
        },
        {
          "command": "reactify-tsx.mergeDeclarationAndInitialization",
          "when": "editorTextFocus && (editorLangId == typescriptreact || editorLangId == javascriptreact || editorLangId == typescript || editorLangId == javascript)",
          "group": "refactor@16.3"
        },
        {
          "command": "reactify-tsx.addParensToSingleArrowParam",
          "when": "editorTextFocus && editorHasSelection && (editorLangId == typescriptreact || editorLangId == javascriptreact || editorLangId == typescript || editorLangId == javascript)",
          "group": "refactor@16.4"
        },
        {
          "command": "reactify-tsx.wrapWithUseCallback",
          "when": "editorTextFocus && editorHasSelection && (editorLangId == typescriptreact || editorLangId == javascriptreact || editorLangId == typescript || editorLangId == javascript)",
          "group": "refactor@11.5"
        },
        {
          "command": "reactify-tsx.replaceIfElseWithTernary",
          "when": "editorTextFocus && editorHasSelection && (editorLangId == typescriptreact || editorLangId == javascriptreact || editorLangId == typescript || editorLangId == javascript)",
          "group": "refactor@12.07"
        },
        {
          "command": "reactify-tsx.simplifyIfElse",
          "when": "editorTextFocus && editorHasSelection && (editorLangId == typescriptreact || editorLangId == javascriptreact || editorLangId == typescript || editorLangId == javascript)",
          "group": "refactor@12.065"
        },
        {
          "command": "reactify-tsx.mergeNestedIf",
          "when": "editorTextFocus && editorHasSelection && (editorLangId == typescriptreact || editorLangId == javascriptreact || editorLangId == typescript || editorLangId == javascript)",
          "group": "refactor@12.067"
        },
        {
          "command": "reactify-tsx.simplifyTernary",
          "when": "editorTextFocus && editorHasSelection && (editorLangId == typescriptreact || editorLangId == javascriptreact || editorLangId == typescript || editorLangId == javascript)",
          "group": "refactor@12.075"
        }
      ]
    },
    "keybindings": [
      {
        "command": "reactify-tsx.extractArrowFunction",
        "key": "ctrl+alt+shift+e",
        "mac": "cmd+alt+shift+e",
        "when": "editorTextFocus && (editorLangId == typescriptreact || editorLangId == javascriptreact || editorLangId == typescript || editorLangId == javascript)"
      },
      {
        "command": "reactify-tsx.transformFunction",
        "key": "ctrl+alt+shift+t",
        "mac": "cmd+alt+shift+t",
        "when": "editorTextFocus && (editorLangId == typescriptreact || editorLangId == javascriptreact || editorLangId == typescript || editorLangId == javascript)"
      },
      {
        "command": "reactify-tsx.flipIfElse",
        "key": "ctrl+alt+shift+i",
        "mac": "cmd+alt+shift+i",
        "when": "editorTextFocus && (editorLangId == typescriptreact || editorLangId == javascriptreact || editorLangId == typescript || editorLangId == javascript)"
      },
      {
        "command": "reactify-tsx.removeRedundantElse",
        "key": "ctrl+alt+shift+r",
        "mac": "cmd+alt+shift+r",
        "when": "editorTextFocus && (editorLangId == typescriptreact || editorLangId == javascriptreact || editorLangId == typescript || editorLangId == javascript)"
      },
      {
        "command": "reactify-tsx.convertToLet",
        "key": "ctrl+alt+shift+l",
        "mac": "cmd+alt+shift+l",
        "when": "editorTextFocus && (editorLangId == typescriptreact || editorLangId == javascriptreact || editorLangId == typescript || editorLangId == javascript)"
      },
      {
        "command": "reactify-tsx.convertToConst",
        "key": "ctrl+alt+shift+o",
        "mac": "cmd+alt+shift+o",
        "when": "editorTextFocus && (editorLangId == typescriptreact || editorLangId == javascriptreact || editorLangId == typescript || editorLangId == javascript)"
      },
      {
        "command": "reactify-tsx.moveBlockUp",
        "key": "ctrl+up",
        "mac": "cmd+ctrl+up",
        "when": "editorTextFocus && (editorLangId == typescriptreact || editorLangId == javascriptreact || editorLangId == typescript || editorLangId == javascript)"
      },
      {
        "command": "reactify-tsx.moveBlockDown",
        "key": "ctrl+down",
        "mac": "cmd+ctrl+down",
        "when": "editorTextFocus && (editorLangId == typescriptreact || editorLangId == javascriptreact || editorLangId == typescript || editorLangId == javascript)"
      },
      {
        "command": "reactify-tsx.enumToConst",
        "key": "ctrl+alt+shift+c",
        "mac": "cmd+alt+shift+c",
        "when": "editorTextFocus && (editorLangId == typescriptreact || editorLangId == javascriptreact || editorLangId == typescript || editorLangId == javascript)"
      },
      {
        "command": "reactify-tsx.toggleJsxAttributeValue",
        "key": "ctrl+alt+shift+b",
        "mac": "cmd+alt+shift+b",
        "when": "editorTextFocus && (editorLangId == typescriptreact || editorLangId == javascriptreact || editorLangId == typescript || editorLangId == javascript)"
      },
      {
        "command": "reactify-tsx.toggleStringTemplate",
        "key": "ctrl+alt+shift+q",
        "mac": "cmd+alt+shift+q",
        "when": "editorTextFocus && (editorLangId == typescriptreact || editorLangId == javascriptreact || editorLangId == typescript || editorLangId == javascript)"
      },
      {
        "command": "reactify-tsx.parallelizeAwaitSelection",
        "key": "ctrl+alt+shift+w",
        "mac": "cmd+alt+shift+w",
        "when": "editorTextFocus && (editorLangId == typescriptreact || editorLangId == javascriptreact || editorLangId == typescript || editorLangId == javascript)"
      },
      {
        "command": "reactify-tsx.toggleArrowBody",
        "key": "ctrl+alt+shift+a",
        "mac": "cmd+alt+shift+a",
        "when": "editorTextFocus && (editorLangId == typescriptreact || editorLangId == javascriptreact || editorLangId == typescript || editorLangId == javascript)"
      },
      {
        "command": "reactify-tsx.splitIntoMultipleDeclarations",
        "key": "ctrl+alt+shift+m",
        "mac": "cmd+alt+shift+m",
        "when": "editorTextFocus && (editorLangId == typescriptreact || editorLangId == javascriptreact || editorLangId == typescript || editorLangId == javascript)"
      },
      {
        "command": "reactify-tsx.splitDeclarationAndInitialization",
        "key": "ctrl+alt+shift+d",
        "mac": "cmd+alt+shift+d",
        "when": "editorTextFocus && (editorLangId == typescriptreact || editorLangId == javascriptreact || editorLangId == typescript || editorLangId == javascript)"
      },
      {
        "command": "reactify-tsx.mergeDeclarationAndInitialization",
        "key": "ctrl+alt+shift+g",
        "mac": "cmd+alt+shift+g",
        "when": "editorTextFocus && (editorLangId == typescriptreact || editorLangId == javascriptreact || editorLangId == typescript || editorLangId == javascript)"
      },
      {
        "command": "reactify-tsx.splitOrMergeString",
        "key": "ctrl+alt+shift+s",
        "mac": "cmd+alt+shift+s",
        "when": "editorTextFocus && (editorLangId == typescriptreact || editorLangId == javascriptreact || editorLangId == typescript || editorLangId == javascript)"
      },
      {
        "command": "reactify-tsx.addParensToSingleArrowParam",
        "key": "ctrl+alt+shift+p",
        "mac": "cmd+alt+shift+p",
        "when": "editorTextFocus && (editorLangId == typescriptreact || editorLangId == javascriptreact || editorLangId == typescript || editorLangId == javascript)"
      },
      {
        "command": "reactify-tsx.wrapWithUseCallback",
        "key": "ctrl+alt+shift+u",
        "mac": "cmd+alt+shift+u",
        "when": "editorTextFocus && (editorLangId == typescriptreact || editorLangId == javascriptreact || editorLangId == typescript || editorLangId == javascript)"
      },
      {
        "command": "reactify-tsx.replaceIfElseWithTernary",
        "key": "ctrl+alt+shift+y",
        "mac": "cmd+alt+shift+y",
        "when": "editorTextFocus && (editorLangId == typescriptreact || editorLangId == javascriptreact || editorLangId == typescript || editorLangId == javascript)"
      },
      {
        "command": "reactify-tsx.simplifyIfElse",
        "key": "ctrl+alt+shift+f",
        "mac": "cmd+alt+shift+f",
        "when": "editorTextFocus && (editorLangId == typescriptreact || editorLangId == javascriptreact || editorLangId == typescript || editorLangId == javascript)"
      },
      {
        "command": "reactify-tsx.simplifyTernary",
        "key": "ctrl+alt+shift+x",
        "mac": "cmd+alt+shift+x",
        "when": "editorTextFocus && (editorLangId == typescriptreact || editorLangId == javascriptreact || editorLangId == typescript || editorLangId == javascript)"
      },
      {
        "command": "reactify-tsx.mergeNestedIf",
        "key": "ctrl+alt+shift+n",
        "mac": "cmd+alt+shift+n",
        "when": "editorTextFocus && (editorLangId == typescriptreact || editorLangId == javascriptreact || editorLangId == typescript || editorLangId == javascript)"
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "npm run package",
    "compile": "npm run check-types && npm run lint && node esbuild.js",
    "watch": "npm-run-all -p watch:*",
    "watch:esbuild": "node esbuild.js --watch",
    "watch:tsc": "tsc --noEmit --watch --project tsconfig.json",
    "package": "npm run check-types && npm run lint && node esbuild.js --production",
    "compile-tests": "tsc -p . --outDir out",
    "watch-tests": "tsc -p . -w --outDir out",
    "pretest": "rimraf out && npm run compile-tests && npm run compile && npm run lint",
    "check-types": "tsc --noEmit",
    "lint": "eslint src",
    "test": "vscode-test"
  },
  "devDependencies": {
    "@types/mocha": "^10.0.10",
    "@types/node": "22.x",
    "@types/vscode": "^1.104.0",
    "@typescript-eslint/eslint-plugin": "^8.42.0",
    "@typescript-eslint/parser": "^8.42.0",
    "@vscode/test-cli": "^0.0.11",
    "@vscode/test-electron": "^2.5.2",
    "esbuild": "^0.25.9",
    "eslint": "^9.34.0",
    "npm-run-all": "^4.1.5",
    "rimraf": "^6.0.1",
    "typescript": "^5.9.2"
  }
}
